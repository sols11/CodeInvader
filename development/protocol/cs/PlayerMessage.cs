// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: PlayerMessage.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PlayerMessage {

  /// <summary>Holder for reflection information generated from PlayerMessage.proto</summary>
  public static partial class PlayerMessageReflection {

    #region Descriptor
    /// <summary>File descriptor for PlayerMessage.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PlayerMessageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNQbGF5ZXJNZXNzYWdlLnByb3RvEg1QbGF5ZXJNZXNzYWdlGhlTdHJ1Y3Qv",
            "Q29tbW9uU3RydWN0LnByb3RvIoMBChFQbGF5ZXJNb3ZlUmVxdWVzdBILCgNy",
            "aWQYASABKAUSCwoDZWlkGAIgASgFEioKCHZlbG9jaXR5GAMgASgLMhguQ29t",
            "bW9uU3RydWN0Lk5ldFZlY3RvcjMSKAoDcm90GAQgASgLMhsuQ29tbW9uU3Ry",
            "dWN0Lk5ldFF1YXRlcm5pb24iggEKElBsYXllck1vdmVSZXNwb25zZRIOCgZy",
            "ZXN1bHQYASABKAUSCwoDZWlkGAIgASgFEiUKA3BvcxgDIAEoCzIYLkNvbW1v",
            "blN0cnVjdC5OZXRWZWN0b3IzEigKA3JvdBgEIAEoCzIbLkNvbW1vblN0cnVj",
            "dC5OZXRRdWF0ZXJuaW9uIk0KDENyYWNrUmVxdWVzdBILCgNyaWQYASABKAUS",
            "CwoDZWlkGAIgASgFEhMKC2NvbXB1dGVyX2lkGAMgASgFEg4KBmRlY29kZRgE",
            "IAEoCCKAAQoNQ3JhY2tSZXNwb25zZRIOCgZyZXN1bHQYASABKAUSCwoDZWlk",
            "GAIgASgFEhMKC2NvbXB1dGVyX2lkGAMgASgFEg4KBmRlY29kZRgEIAEoCBIt",
            "Cgl0cmFuc2Zvcm0YBSABKAsyGi5Db21tb25TdHJ1Y3QuTmV0VHJhbnNmb3Jt",
            "IkkKFUNvbXB1dGVyQ3JhY2tSZXNwb25zZRIOCgZyZXN1bHQYASABKAUSCwoD",
            "ZWlkGAIgASgFEhMKC3N0YXJ0T3JTdG9wGAMgASgIIjAKFENyYWNrQ29tcGxl",
            "dGVSZXF1ZXN0EgsKA3JpZBgBIAEoBRILCgNlaWQYAiABKAUiSQoVQ3JhY2tD",
            "b21wbGV0ZVJlc3BvbnNlEg4KBnJlc3VsdBgBIAEoBRILCgNlaWQYAiABKAUS",
            "EwoLY29tcHV0ZXJfaWQYAyABKAUqkQEKCXByb3RvX2lkcxIPCgtFTVBUWV9Q",
            "Uk9UTxAAEhIKDlBMQVlFUl9TRVJWSUNFEAMSCAoETU9WRRABEgkKBUNSQUNL",
            "EAISDQoJUElDS19JVEVNEAMSDwoLVEFLRV9EQU1BR0UQBBISCg5DT01QVVRF",
            "Ul9DUkFDSxAFEhIKDkNSQUNLX0NPTVBMRVRFEAYaAhABYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::CommonStruct.CommonStructReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::PlayerMessage.proto_ids), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PlayerMessage.PlayerMoveRequest), global::PlayerMessage.PlayerMoveRequest.Parser, new[]{ "Rid", "Eid", "Velocity", "Rot" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlayerMessage.PlayerMoveResponse), global::PlayerMessage.PlayerMoveResponse.Parser, new[]{ "Result", "Eid", "Pos", "Rot" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlayerMessage.CrackRequest), global::PlayerMessage.CrackRequest.Parser, new[]{ "Rid", "Eid", "ComputerId", "Decode" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlayerMessage.CrackResponse), global::PlayerMessage.CrackResponse.Parser, new[]{ "Result", "Eid", "ComputerId", "Decode", "Transform" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlayerMessage.ComputerCrackResponse), global::PlayerMessage.ComputerCrackResponse.Parser, new[]{ "Result", "Eid", "StartOrStop" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlayerMessage.CrackCompleteRequest), global::PlayerMessage.CrackCompleteRequest.Parser, new[]{ "Rid", "Eid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlayerMessage.CrackCompleteResponse), global::PlayerMessage.CrackCompleteResponse.Parser, new[]{ "Result", "Eid", "ComputerId" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum proto_ids {
    [pbr::OriginalName("EMPTY_PROTO")] EmptyProto = 0,
    /// <summary>
    /// service id
    /// </summary>
    [pbr::OriginalName("PLAYER_SERVICE")] PlayerService = 3,
    /// <summary>
    /// command id
    /// </summary>
    [pbr::OriginalName("MOVE")] Move = 1,
    [pbr::OriginalName("CRACK")] Crack = 2,
    [pbr::OriginalName("PICK_ITEM", PreferredAlias = false)] PickItem = 3,
    [pbr::OriginalName("TAKE_DAMAGE")] TakeDamage = 4,
    [pbr::OriginalName("COMPUTER_CRACK")] ComputerCrack = 5,
    [pbr::OriginalName("CRACK_COMPLETE")] CrackComplete = 6,
  }

  #endregion

  #region Messages
  public sealed partial class PlayerMoveRequest : pb::IMessage<PlayerMoveRequest> {
    private static readonly pb::MessageParser<PlayerMoveRequest> _parser = new pb::MessageParser<PlayerMoveRequest>(() => new PlayerMoveRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerMoveRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlayerMessage.PlayerMessageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerMoveRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerMoveRequest(PlayerMoveRequest other) : this() {
      rid_ = other.rid_;
      eid_ = other.eid_;
      velocity_ = other.velocity_ != null ? other.velocity_.Clone() : null;
      rot_ = other.rot_ != null ? other.rot_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerMoveRequest Clone() {
      return new PlayerMoveRequest(this);
    }

    /// <summary>Field number for the "rid" field.</summary>
    public const int RidFieldNumber = 1;
    private int rid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rid {
      get { return rid_; }
      set {
        rid_ = value;
      }
    }

    /// <summary>Field number for the "eid" field.</summary>
    public const int EidFieldNumber = 2;
    private int eid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Eid {
      get { return eid_; }
      set {
        eid_ = value;
      }
    }

    /// <summary>Field number for the "velocity" field.</summary>
    public const int VelocityFieldNumber = 3;
    private global::CommonStruct.NetVector3 velocity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CommonStruct.NetVector3 Velocity {
      get { return velocity_; }
      set {
        velocity_ = value;
      }
    }

    /// <summary>Field number for the "rot" field.</summary>
    public const int RotFieldNumber = 4;
    private global::CommonStruct.NetQuaternion rot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CommonStruct.NetQuaternion Rot {
      get { return rot_; }
      set {
        rot_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerMoveRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerMoveRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Rid != other.Rid) return false;
      if (Eid != other.Eid) return false;
      if (!object.Equals(Velocity, other.Velocity)) return false;
      if (!object.Equals(Rot, other.Rot)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Rid != 0) hash ^= Rid.GetHashCode();
      if (Eid != 0) hash ^= Eid.GetHashCode();
      if (velocity_ != null) hash ^= Velocity.GetHashCode();
      if (rot_ != null) hash ^= Rot.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Rid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Rid);
      }
      if (Eid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Eid);
      }
      if (velocity_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Velocity);
      }
      if (rot_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Rot);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Rid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rid);
      }
      if (Eid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Eid);
      }
      if (velocity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Velocity);
      }
      if (rot_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rot);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerMoveRequest other) {
      if (other == null) {
        return;
      }
      if (other.Rid != 0) {
        Rid = other.Rid;
      }
      if (other.Eid != 0) {
        Eid = other.Eid;
      }
      if (other.velocity_ != null) {
        if (velocity_ == null) {
          Velocity = new global::CommonStruct.NetVector3();
        }
        Velocity.MergeFrom(other.Velocity);
      }
      if (other.rot_ != null) {
        if (rot_ == null) {
          Rot = new global::CommonStruct.NetQuaternion();
        }
        Rot.MergeFrom(other.Rot);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Rid = input.ReadInt32();
            break;
          }
          case 16: {
            Eid = input.ReadInt32();
            break;
          }
          case 26: {
            if (velocity_ == null) {
              Velocity = new global::CommonStruct.NetVector3();
            }
            input.ReadMessage(Velocity);
            break;
          }
          case 34: {
            if (rot_ == null) {
              Rot = new global::CommonStruct.NetQuaternion();
            }
            input.ReadMessage(Rot);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerMoveResponse : pb::IMessage<PlayerMoveResponse> {
    private static readonly pb::MessageParser<PlayerMoveResponse> _parser = new pb::MessageParser<PlayerMoveResponse>(() => new PlayerMoveResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerMoveResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlayerMessage.PlayerMessageReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerMoveResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerMoveResponse(PlayerMoveResponse other) : this() {
      result_ = other.result_;
      eid_ = other.eid_;
      pos_ = other.pos_ != null ? other.pos_.Clone() : null;
      rot_ = other.rot_ != null ? other.rot_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerMoveResponse Clone() {
      return new PlayerMoveResponse(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private int result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "eid" field.</summary>
    public const int EidFieldNumber = 2;
    private int eid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Eid {
      get { return eid_; }
      set {
        eid_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 3;
    private global::CommonStruct.NetVector3 pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CommonStruct.NetVector3 Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "rot" field.</summary>
    public const int RotFieldNumber = 4;
    private global::CommonStruct.NetQuaternion rot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CommonStruct.NetQuaternion Rot {
      get { return rot_; }
      set {
        rot_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerMoveResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerMoveResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (Eid != other.Eid) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      if (!object.Equals(Rot, other.Rot)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      if (Eid != 0) hash ^= Eid.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (rot_ != null) hash ^= Rot.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Result);
      }
      if (Eid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Eid);
      }
      if (pos_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Pos);
      }
      if (rot_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Rot);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      if (Eid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Eid);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (rot_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rot);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerMoveResponse other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.Eid != 0) {
        Eid = other.Eid;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          Pos = new global::CommonStruct.NetVector3();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.rot_ != null) {
        if (rot_ == null) {
          Rot = new global::CommonStruct.NetQuaternion();
        }
        Rot.MergeFrom(other.Rot);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Result = input.ReadInt32();
            break;
          }
          case 16: {
            Eid = input.ReadInt32();
            break;
          }
          case 26: {
            if (pos_ == null) {
              Pos = new global::CommonStruct.NetVector3();
            }
            input.ReadMessage(Pos);
            break;
          }
          case 34: {
            if (rot_ == null) {
              Rot = new global::CommonStruct.NetQuaternion();
            }
            input.ReadMessage(Rot);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CrackRequest : pb::IMessage<CrackRequest> {
    private static readonly pb::MessageParser<CrackRequest> _parser = new pb::MessageParser<CrackRequest>(() => new CrackRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CrackRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlayerMessage.PlayerMessageReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrackRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrackRequest(CrackRequest other) : this() {
      rid_ = other.rid_;
      eid_ = other.eid_;
      computerId_ = other.computerId_;
      decode_ = other.decode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrackRequest Clone() {
      return new CrackRequest(this);
    }

    /// <summary>Field number for the "rid" field.</summary>
    public const int RidFieldNumber = 1;
    private int rid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rid {
      get { return rid_; }
      set {
        rid_ = value;
      }
    }

    /// <summary>Field number for the "eid" field.</summary>
    public const int EidFieldNumber = 2;
    private int eid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Eid {
      get { return eid_; }
      set {
        eid_ = value;
      }
    }

    /// <summary>Field number for the "computer_id" field.</summary>
    public const int ComputerIdFieldNumber = 3;
    private int computerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ComputerId {
      get { return computerId_; }
      set {
        computerId_ = value;
      }
    }

    /// <summary>Field number for the "decode" field.</summary>
    public const int DecodeFieldNumber = 4;
    private bool decode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Decode {
      get { return decode_; }
      set {
        decode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CrackRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CrackRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Rid != other.Rid) return false;
      if (Eid != other.Eid) return false;
      if (ComputerId != other.ComputerId) return false;
      if (Decode != other.Decode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Rid != 0) hash ^= Rid.GetHashCode();
      if (Eid != 0) hash ^= Eid.GetHashCode();
      if (ComputerId != 0) hash ^= ComputerId.GetHashCode();
      if (Decode != false) hash ^= Decode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Rid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Rid);
      }
      if (Eid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Eid);
      }
      if (ComputerId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ComputerId);
      }
      if (Decode != false) {
        output.WriteRawTag(32);
        output.WriteBool(Decode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Rid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rid);
      }
      if (Eid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Eid);
      }
      if (ComputerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ComputerId);
      }
      if (Decode != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CrackRequest other) {
      if (other == null) {
        return;
      }
      if (other.Rid != 0) {
        Rid = other.Rid;
      }
      if (other.Eid != 0) {
        Eid = other.Eid;
      }
      if (other.ComputerId != 0) {
        ComputerId = other.ComputerId;
      }
      if (other.Decode != false) {
        Decode = other.Decode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Rid = input.ReadInt32();
            break;
          }
          case 16: {
            Eid = input.ReadInt32();
            break;
          }
          case 24: {
            ComputerId = input.ReadInt32();
            break;
          }
          case 32: {
            Decode = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CrackResponse : pb::IMessage<CrackResponse> {
    private static readonly pb::MessageParser<CrackResponse> _parser = new pb::MessageParser<CrackResponse>(() => new CrackResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CrackResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlayerMessage.PlayerMessageReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrackResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrackResponse(CrackResponse other) : this() {
      result_ = other.result_;
      eid_ = other.eid_;
      computerId_ = other.computerId_;
      decode_ = other.decode_;
      transform_ = other.transform_ != null ? other.transform_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrackResponse Clone() {
      return new CrackResponse(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private int result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "eid" field.</summary>
    public const int EidFieldNumber = 2;
    private int eid_;
    /// <summary>
    /// playerid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Eid {
      get { return eid_; }
      set {
        eid_ = value;
      }
    }

    /// <summary>Field number for the "computer_id" field.</summary>
    public const int ComputerIdFieldNumber = 3;
    private int computerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ComputerId {
      get { return computerId_; }
      set {
        computerId_ = value;
      }
    }

    /// <summary>Field number for the "decode" field.</summary>
    public const int DecodeFieldNumber = 4;
    private bool decode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Decode {
      get { return decode_; }
      set {
        decode_ = value;
      }
    }

    /// <summary>Field number for the "transform" field.</summary>
    public const int TransformFieldNumber = 5;
    private global::CommonStruct.NetTransform transform_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CommonStruct.NetTransform Transform {
      get { return transform_; }
      set {
        transform_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CrackResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CrackResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (Eid != other.Eid) return false;
      if (ComputerId != other.ComputerId) return false;
      if (Decode != other.Decode) return false;
      if (!object.Equals(Transform, other.Transform)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      if (Eid != 0) hash ^= Eid.GetHashCode();
      if (ComputerId != 0) hash ^= ComputerId.GetHashCode();
      if (Decode != false) hash ^= Decode.GetHashCode();
      if (transform_ != null) hash ^= Transform.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Result);
      }
      if (Eid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Eid);
      }
      if (ComputerId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ComputerId);
      }
      if (Decode != false) {
        output.WriteRawTag(32);
        output.WriteBool(Decode);
      }
      if (transform_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Transform);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      if (Eid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Eid);
      }
      if (ComputerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ComputerId);
      }
      if (Decode != false) {
        size += 1 + 1;
      }
      if (transform_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Transform);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CrackResponse other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.Eid != 0) {
        Eid = other.Eid;
      }
      if (other.ComputerId != 0) {
        ComputerId = other.ComputerId;
      }
      if (other.Decode != false) {
        Decode = other.Decode;
      }
      if (other.transform_ != null) {
        if (transform_ == null) {
          Transform = new global::CommonStruct.NetTransform();
        }
        Transform.MergeFrom(other.Transform);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Result = input.ReadInt32();
            break;
          }
          case 16: {
            Eid = input.ReadInt32();
            break;
          }
          case 24: {
            ComputerId = input.ReadInt32();
            break;
          }
          case 32: {
            Decode = input.ReadBool();
            break;
          }
          case 42: {
            if (transform_ == null) {
              Transform = new global::CommonStruct.NetTransform();
            }
            input.ReadMessage(Transform);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 单播
  /// </summary>
  public sealed partial class ComputerCrackResponse : pb::IMessage<ComputerCrackResponse> {
    private static readonly pb::MessageParser<ComputerCrackResponse> _parser = new pb::MessageParser<ComputerCrackResponse>(() => new ComputerCrackResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ComputerCrackResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlayerMessage.PlayerMessageReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComputerCrackResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComputerCrackResponse(ComputerCrackResponse other) : this() {
      result_ = other.result_;
      eid_ = other.eid_;
      startOrStop_ = other.startOrStop_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComputerCrackResponse Clone() {
      return new ComputerCrackResponse(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private int result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "eid" field.</summary>
    public const int EidFieldNumber = 2;
    private int eid_;
    /// <summary>
    /// computerid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Eid {
      get { return eid_; }
      set {
        eid_ = value;
      }
    }

    /// <summary>Field number for the "startOrStop" field.</summary>
    public const int StartOrStopFieldNumber = 3;
    private bool startOrStop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool StartOrStop {
      get { return startOrStop_; }
      set {
        startOrStop_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ComputerCrackResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ComputerCrackResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (Eid != other.Eid) return false;
      if (StartOrStop != other.StartOrStop) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      if (Eid != 0) hash ^= Eid.GetHashCode();
      if (StartOrStop != false) hash ^= StartOrStop.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Result);
      }
      if (Eid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Eid);
      }
      if (StartOrStop != false) {
        output.WriteRawTag(24);
        output.WriteBool(StartOrStop);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      if (Eid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Eid);
      }
      if (StartOrStop != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ComputerCrackResponse other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.Eid != 0) {
        Eid = other.Eid;
      }
      if (other.StartOrStop != false) {
        StartOrStop = other.StartOrStop;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Result = input.ReadInt32();
            break;
          }
          case 16: {
            Eid = input.ReadInt32();
            break;
          }
          case 24: {
            StartOrStop = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CrackCompleteRequest : pb::IMessage<CrackCompleteRequest> {
    private static readonly pb::MessageParser<CrackCompleteRequest> _parser = new pb::MessageParser<CrackCompleteRequest>(() => new CrackCompleteRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CrackCompleteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlayerMessage.PlayerMessageReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrackCompleteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrackCompleteRequest(CrackCompleteRequest other) : this() {
      rid_ = other.rid_;
      eid_ = other.eid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrackCompleteRequest Clone() {
      return new CrackCompleteRequest(this);
    }

    /// <summary>Field number for the "rid" field.</summary>
    public const int RidFieldNumber = 1;
    private int rid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rid {
      get { return rid_; }
      set {
        rid_ = value;
      }
    }

    /// <summary>Field number for the "eid" field.</summary>
    public const int EidFieldNumber = 2;
    private int eid_;
    /// <summary>
    /// computerid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Eid {
      get { return eid_; }
      set {
        eid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CrackCompleteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CrackCompleteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Rid != other.Rid) return false;
      if (Eid != other.Eid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Rid != 0) hash ^= Rid.GetHashCode();
      if (Eid != 0) hash ^= Eid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Rid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Rid);
      }
      if (Eid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Eid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Rid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rid);
      }
      if (Eid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Eid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CrackCompleteRequest other) {
      if (other == null) {
        return;
      }
      if (other.Rid != 0) {
        Rid = other.Rid;
      }
      if (other.Eid != 0) {
        Eid = other.Eid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Rid = input.ReadInt32();
            break;
          }
          case 16: {
            Eid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CrackCompleteResponse : pb::IMessage<CrackCompleteResponse> {
    private static readonly pb::MessageParser<CrackCompleteResponse> _parser = new pb::MessageParser<CrackCompleteResponse>(() => new CrackCompleteResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CrackCompleteResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlayerMessage.PlayerMessageReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrackCompleteResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrackCompleteResponse(CrackCompleteResponse other) : this() {
      result_ = other.result_;
      eid_ = other.eid_;
      computerId_ = other.computerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrackCompleteResponse Clone() {
      return new CrackCompleteResponse(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private int result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "eid" field.</summary>
    public const int EidFieldNumber = 2;
    private int eid_;
    /// <summary>
    /// playerid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Eid {
      get { return eid_; }
      set {
        eid_ = value;
      }
    }

    /// <summary>Field number for the "computer_id" field.</summary>
    public const int ComputerIdFieldNumber = 3;
    private int computerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ComputerId {
      get { return computerId_; }
      set {
        computerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CrackCompleteResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CrackCompleteResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (Eid != other.Eid) return false;
      if (ComputerId != other.ComputerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      if (Eid != 0) hash ^= Eid.GetHashCode();
      if (ComputerId != 0) hash ^= ComputerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Result);
      }
      if (Eid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Eid);
      }
      if (ComputerId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ComputerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      if (Eid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Eid);
      }
      if (ComputerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ComputerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CrackCompleteResponse other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.Eid != 0) {
        Eid = other.Eid;
      }
      if (other.ComputerId != 0) {
        ComputerId = other.ComputerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Result = input.ReadInt32();
            break;
          }
          case 16: {
            Eid = input.ReadInt32();
            break;
          }
          case 24: {
            ComputerId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
