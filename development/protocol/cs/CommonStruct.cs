// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Struct/CommonStruct.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace CommonStruct {

  /// <summary>Holder for reflection information generated from Struct/CommonStruct.proto</summary>
  public static partial class CommonStructReflection {

    #region Descriptor
    /// <summary>File descriptor for Struct/CommonStruct.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CommonStructReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChlTdHJ1Y3QvQ29tbW9uU3RydWN0LnByb3RvEgxDb21tb25TdHJ1Y3QiIgoK",
            "TmV0VmVjdG9yMhIJCgF4GAEgASgCEgkKAXkYAiABKAIiLQoKTmV0VmVjdG9y",
            "MxIJCgF4GAEgASgCEgkKAXkYAiABKAISCQoBehgDIAEoAiI7Cg1OZXRRdWF0",
            "ZXJuaW9uEgkKAXgYASABKAISCQoBeRgCIAEoAhIJCgF6GAMgASgCEgkKAXcY",
            "BCABKAIiaQoMTmV0VHJhbnNmb3JtEioKCHBvc2l0aW9uGAEgASgLMhguQ29t",
            "bW9uU3RydWN0Lk5ldFZlY3RvcjMSLQoIcm90YXRpb24YAiABKAsyGy5Db21t",
            "b25TdHJ1Y3QuTmV0UXVhdGVybmlvbiK1AQoNTmV0UGxheWVyRGF0YRILCgNl",
            "aWQYASABKAUSEgoKbW92ZV9zcGVlZBgCIAEoAhIRCglyb3Rfc3BlZWQYAyAB",
            "KAISDgoGbWF4X2hwGAQgASgFEgoKAmhwGAUgASgFEiUKBXN0YXRlGAYgASgO",
            "MhYuQ29tbW9uU3RydWN0Lk5ldFN0YXRlEi0KCXRyYW5zZm9ybRgHIAEoCzIa",
            "LkNvbW1vblN0cnVjdC5OZXRUcmFuc2Zvcm0ingMKDE5ldFJvYm90RGF0YRIL",
            "CgNlaWQYASABKAUSEgoKbW92ZV9zcGVlZBgCIAEoAhIRCglyb3Rfc3BlZWQY",
            "AyABKAISDgoGbWF4X2hwGAQgASgFEgoKAmhwGAUgASgFEiUKBXN0YXRlGAYg",
            "ASgOMhYuQ29tbW9uU3RydWN0Lk5ldFN0YXRlEi0KCXRyYW5zZm9ybRgHIAEo",
            "CzIaLkNvbW1vblN0cnVjdC5OZXRUcmFuc2Zvcm0SGwoTYXJtb3JfcmVjb3Zl",
            "cl9kZWxheRgIIAEoAhIbChNhcm1vcl9yZWNvdmVyX3NwZWVkGAkgASgCEhMK",
            "C2ZyZWVfd2VpZ2h0GAogASgFEhEKCW1heF9hcm1vchgMIAEoBRINCgVhcm1v",
            "chgNIAEoBRIWCg5zaWduYWxfc2VuZGluZxgOIAEoBRIyCgxhY3Rpb25fc3Rh",
            "dGUYDyABKA4yHC5Db21tb25TdHJ1Y3QuTmV0QWN0aW9uU3RhdGUSEAoIYXR0",
            "YWNrZWQYECABKAgSGQoRYXR0YWNrX3RhcmdldF9laWQYESABKAUinwEKD05l",
            "dENvbXB1dGVyRGF0YRILCgNlaWQYASABKAUSEQoJbmVlZF90aW1lGAIgASgC",
            "EhMKC2NyYWNrX3RpbWVyGAMgASgCEhEKCWNvbXBsZXRlZBgEIAEoCBIVCg1i",
            "ZWluZ19kZWNvZGVkGAUgASgIEi0KCXRyYW5zZm9ybRgGIAEoCzIaLkNvbW1v",
            "blN0cnVjdC5OZXRUcmFuc2Zvcm0iZQoLTmV0SG9tZURhdGESCwoDZWlkGAEg",
            "ASgFEg4KBm1heF9ocBgCIAEoBRIKCgJocBgDIAEoBRItCgl0cmFuc2Zvcm0Y",
            "BCABKAsyGi5Db21tb25TdHJ1Y3QuTmV0VHJhbnNmb3JtIqIBCgpEYW1hZ2VJ",
            "bmZvEhEKCWF0dGFja19pZBgBIAEoBRIPCgdodXJ0X2lkGAIgAygFEg4KBmF0",
            "dGFjaxgDIAEoBRIXCg9zcGVjaWFsX2VmZmVjdHMYBCABKAUSEQoJYmVhdF9i",
            "YWNrGAUgASgCEhAKCHNwZWVkX3VwGAYgASgCEhEKCXNsb3dfZG93bhgHIAEo",
            "AhIPCgdjYW5fZmx5GAggASgIKi8KCE5ldFN0YXRlEgoKBkxpdmluZxAAEgkK",
            "BURlYXRoEAESDAoIRGVjb2RpbmcQAio/Cg5OZXRBY3Rpb25TdGF0ZRINCglB",
            "dHRhY2tpbmcQABIOCgpSZXRyZWF0aW5nEAESDgoKUGF0cm9sbGluZxACKi0K",
            "CVJvYm90VHlwZRIJCgVMaWdodBAAEgoKBk1lZGl1bRABEgkKBUhlYXZ5EAIq",
            "KgoJRXF1aXBUeXBlEgoKBldlYXBvbhAAEggKBEhlYWQQARIHCgNMZWcQAipX",
            "CgpXZWFwb25UeXBlEggKBE5vbmUQABIJCgVTd29yZBABEgsKB1Nob3RndW4Q",
            "AhIMCghMYXNlckd1bhADEg0KCUNoYXJnZUd1bhAEEgoKBkdhdGxpbhAFYgZw",
            "cm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::CommonStruct.NetState), typeof(global::CommonStruct.NetActionState), typeof(global::CommonStruct.RobotType), typeof(global::CommonStruct.EquipType), typeof(global::CommonStruct.WeaponType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::CommonStruct.NetVector2), global::CommonStruct.NetVector2.Parser, new[]{ "X", "Y" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CommonStruct.NetVector3), global::CommonStruct.NetVector3.Parser, new[]{ "X", "Y", "Z" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CommonStruct.NetQuaternion), global::CommonStruct.NetQuaternion.Parser, new[]{ "X", "Y", "Z", "W" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CommonStruct.NetTransform), global::CommonStruct.NetTransform.Parser, new[]{ "Position", "Rotation" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CommonStruct.NetPlayerData), global::CommonStruct.NetPlayerData.Parser, new[]{ "Eid", "MoveSpeed", "RotSpeed", "MaxHp", "Hp", "State", "Transform" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CommonStruct.NetRobotData), global::CommonStruct.NetRobotData.Parser, new[]{ "Eid", "MoveSpeed", "RotSpeed", "MaxHp", "Hp", "State", "Transform", "ArmorRecoverDelay", "ArmorRecoverSpeed", "FreeWeight", "MaxArmor", "Armor", "SignalSending", "ActionState", "Attacked", "AttackTargetEid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CommonStruct.NetComputerData), global::CommonStruct.NetComputerData.Parser, new[]{ "Eid", "NeedTime", "CrackTimer", "Completed", "BeingDecoded", "Transform" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CommonStruct.NetHomeData), global::CommonStruct.NetHomeData.Parser, new[]{ "Eid", "MaxHp", "Hp", "Transform" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CommonStruct.DamageInfo), global::CommonStruct.DamageInfo.Parser, new[]{ "AttackId", "HurtId", "Attack", "SpecialEffects", "BeatBack", "SpeedUp", "SlowDown", "CanFly" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum NetState {
    [pbr::OriginalName("Living")] Living = 0,
    [pbr::OriginalName("Death")] Death = 1,
    /// <summary>
    /// Decoding 目前是给Player用的
    /// </summary>
    [pbr::OriginalName("Decoding")] Decoding = 2,
  }

  public enum NetActionState {
    [pbr::OriginalName("Attacking")] Attacking = 0,
    [pbr::OriginalName("Retreating")] Retreating = 1,
    [pbr::OriginalName("Patrolling")] Patrolling = 2,
  }

  public enum RobotType {
    [pbr::OriginalName("Light")] Light = 0,
    [pbr::OriginalName("Medium")] Medium = 1,
    [pbr::OriginalName("Heavy")] Heavy = 2,
  }

  public enum EquipType {
    [pbr::OriginalName("Weapon")] Weapon = 0,
    [pbr::OriginalName("Head")] Head = 1,
    [pbr::OriginalName("Leg")] Leg = 2,
  }

  public enum WeaponType {
    [pbr::OriginalName("None")] None = 0,
    [pbr::OriginalName("Sword")] Sword = 1,
    [pbr::OriginalName("Shotgun")] Shotgun = 2,
    [pbr::OriginalName("LaserGun")] LaserGun = 3,
    [pbr::OriginalName("ChargeGun")] ChargeGun = 4,
    [pbr::OriginalName("Gatlin")] Gatlin = 5,
  }

  #endregion

  #region Messages
  public sealed partial class NetVector2 : pb::IMessage<NetVector2> {
    private static readonly pb::MessageParser<NetVector2> _parser = new pb::MessageParser<NetVector2>(() => new NetVector2());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetVector2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CommonStruct.CommonStructReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetVector2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetVector2(NetVector2 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetVector2 Clone() {
      return new NetVector2(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetVector2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetVector2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetVector2 other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NetVector3 : pb::IMessage<NetVector3> {
    private static readonly pb::MessageParser<NetVector3> _parser = new pb::MessageParser<NetVector3>(() => new NetVector3());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetVector3> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CommonStruct.CommonStructReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetVector3() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetVector3(NetVector3 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetVector3 Clone() {
      return new NetVector3(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetVector3);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetVector3 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetVector3 other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NetQuaternion : pb::IMessage<NetQuaternion> {
    private static readonly pb::MessageParser<NetQuaternion> _parser = new pb::MessageParser<NetQuaternion>(() => new NetQuaternion());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetQuaternion> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CommonStruct.CommonStructReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetQuaternion() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetQuaternion(NetQuaternion other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      w_ = other.w_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetQuaternion Clone() {
      return new NetQuaternion(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "w" field.</summary>
    public const int WFieldNumber = 4;
    private float w_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float W {
      get { return w_; }
      set {
        w_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetQuaternion);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetQuaternion other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(W, other.W)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (W != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(W);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (W != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(W);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (W != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetQuaternion other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      if (other.W != 0F) {
        W = other.W;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
          case 37: {
            W = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NetTransform : pb::IMessage<NetTransform> {
    private static readonly pb::MessageParser<NetTransform> _parser = new pb::MessageParser<NetTransform>(() => new NetTransform());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetTransform> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CommonStruct.CommonStructReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetTransform() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetTransform(NetTransform other) : this() {
      position_ = other.position_ != null ? other.position_.Clone() : null;
      rotation_ = other.rotation_ != null ? other.rotation_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetTransform Clone() {
      return new NetTransform(this);
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private global::CommonStruct.NetVector3 position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CommonStruct.NetVector3 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 2;
    private global::CommonStruct.NetQuaternion rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CommonStruct.NetQuaternion Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetTransform);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetTransform other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (position_ != null) hash ^= Position.GetHashCode();
      if (rotation_ != null) hash ^= Rotation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (rotation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Rotation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (rotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetTransform other) {
      if (other == null) {
        return;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::CommonStruct.NetVector3();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.rotation_ != null) {
        if (rotation_ == null) {
          Rotation = new global::CommonStruct.NetQuaternion();
        }
        Rotation.MergeFrom(other.Rotation);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (position_ == null) {
              Position = new global::CommonStruct.NetVector3();
            }
            input.ReadMessage(Position);
            break;
          }
          case 18: {
            if (rotation_ == null) {
              Rotation = new global::CommonStruct.NetQuaternion();
            }
            input.ReadMessage(Rotation);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NetPlayerData : pb::IMessage<NetPlayerData> {
    private static readonly pb::MessageParser<NetPlayerData> _parser = new pb::MessageParser<NetPlayerData>(() => new NetPlayerData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetPlayerData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CommonStruct.CommonStructReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetPlayerData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetPlayerData(NetPlayerData other) : this() {
      eid_ = other.eid_;
      moveSpeed_ = other.moveSpeed_;
      rotSpeed_ = other.rotSpeed_;
      maxHp_ = other.maxHp_;
      hp_ = other.hp_;
      state_ = other.state_;
      transform_ = other.transform_ != null ? other.transform_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetPlayerData Clone() {
      return new NetPlayerData(this);
    }

    /// <summary>Field number for the "eid" field.</summary>
    public const int EidFieldNumber = 1;
    private int eid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Eid {
      get { return eid_; }
      set {
        eid_ = value;
      }
    }

    /// <summary>Field number for the "move_speed" field.</summary>
    public const int MoveSpeedFieldNumber = 2;
    private float moveSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MoveSpeed {
      get { return moveSpeed_; }
      set {
        moveSpeed_ = value;
      }
    }

    /// <summary>Field number for the "rot_speed" field.</summary>
    public const int RotSpeedFieldNumber = 3;
    private float rotSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RotSpeed {
      get { return rotSpeed_; }
      set {
        rotSpeed_ = value;
      }
    }

    /// <summary>Field number for the "max_hp" field.</summary>
    public const int MaxHpFieldNumber = 4;
    private int maxHp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxHp {
      get { return maxHp_; }
      set {
        maxHp_ = value;
      }
    }

    /// <summary>Field number for the "hp" field.</summary>
    public const int HpFieldNumber = 5;
    private int hp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 6;
    private global::CommonStruct.NetState state_ = global::CommonStruct.NetState.Living;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CommonStruct.NetState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "transform" field.</summary>
    public const int TransformFieldNumber = 7;
    private global::CommonStruct.NetTransform transform_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CommonStruct.NetTransform Transform {
      get { return transform_; }
      set {
        transform_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetPlayerData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetPlayerData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Eid != other.Eid) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MoveSpeed, other.MoveSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RotSpeed, other.RotSpeed)) return false;
      if (MaxHp != other.MaxHp) return false;
      if (Hp != other.Hp) return false;
      if (State != other.State) return false;
      if (!object.Equals(Transform, other.Transform)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Eid != 0) hash ^= Eid.GetHashCode();
      if (MoveSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MoveSpeed);
      if (RotSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RotSpeed);
      if (MaxHp != 0) hash ^= MaxHp.GetHashCode();
      if (Hp != 0) hash ^= Hp.GetHashCode();
      if (State != global::CommonStruct.NetState.Living) hash ^= State.GetHashCode();
      if (transform_ != null) hash ^= Transform.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Eid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Eid);
      }
      if (MoveSpeed != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(MoveSpeed);
      }
      if (RotSpeed != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(RotSpeed);
      }
      if (MaxHp != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MaxHp);
      }
      if (Hp != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Hp);
      }
      if (State != global::CommonStruct.NetState.Living) {
        output.WriteRawTag(48);
        output.WriteEnum((int) State);
      }
      if (transform_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Transform);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Eid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Eid);
      }
      if (MoveSpeed != 0F) {
        size += 1 + 4;
      }
      if (RotSpeed != 0F) {
        size += 1 + 4;
      }
      if (MaxHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxHp);
      }
      if (Hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
      }
      if (State != global::CommonStruct.NetState.Living) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (transform_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Transform);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetPlayerData other) {
      if (other == null) {
        return;
      }
      if (other.Eid != 0) {
        Eid = other.Eid;
      }
      if (other.MoveSpeed != 0F) {
        MoveSpeed = other.MoveSpeed;
      }
      if (other.RotSpeed != 0F) {
        RotSpeed = other.RotSpeed;
      }
      if (other.MaxHp != 0) {
        MaxHp = other.MaxHp;
      }
      if (other.Hp != 0) {
        Hp = other.Hp;
      }
      if (other.State != global::CommonStruct.NetState.Living) {
        State = other.State;
      }
      if (other.transform_ != null) {
        if (transform_ == null) {
          Transform = new global::CommonStruct.NetTransform();
        }
        Transform.MergeFrom(other.Transform);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Eid = input.ReadInt32();
            break;
          }
          case 21: {
            MoveSpeed = input.ReadFloat();
            break;
          }
          case 29: {
            RotSpeed = input.ReadFloat();
            break;
          }
          case 32: {
            MaxHp = input.ReadInt32();
            break;
          }
          case 40: {
            Hp = input.ReadInt32();
            break;
          }
          case 48: {
            State = (global::CommonStruct.NetState) input.ReadEnum();
            break;
          }
          case 58: {
            if (transform_ == null) {
              Transform = new global::CommonStruct.NetTransform();
            }
            input.ReadMessage(Transform);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NetRobotData : pb::IMessage<NetRobotData> {
    private static readonly pb::MessageParser<NetRobotData> _parser = new pb::MessageParser<NetRobotData>(() => new NetRobotData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetRobotData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CommonStruct.CommonStructReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetRobotData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetRobotData(NetRobotData other) : this() {
      eid_ = other.eid_;
      moveSpeed_ = other.moveSpeed_;
      rotSpeed_ = other.rotSpeed_;
      maxHp_ = other.maxHp_;
      hp_ = other.hp_;
      state_ = other.state_;
      transform_ = other.transform_ != null ? other.transform_.Clone() : null;
      armorRecoverDelay_ = other.armorRecoverDelay_;
      armorRecoverSpeed_ = other.armorRecoverSpeed_;
      freeWeight_ = other.freeWeight_;
      maxArmor_ = other.maxArmor_;
      armor_ = other.armor_;
      signalSending_ = other.signalSending_;
      actionState_ = other.actionState_;
      attacked_ = other.attacked_;
      attackTargetEid_ = other.attackTargetEid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetRobotData Clone() {
      return new NetRobotData(this);
    }

    /// <summary>Field number for the "eid" field.</summary>
    public const int EidFieldNumber = 1;
    private int eid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Eid {
      get { return eid_; }
      set {
        eid_ = value;
      }
    }

    /// <summary>Field number for the "move_speed" field.</summary>
    public const int MoveSpeedFieldNumber = 2;
    private float moveSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MoveSpeed {
      get { return moveSpeed_; }
      set {
        moveSpeed_ = value;
      }
    }

    /// <summary>Field number for the "rot_speed" field.</summary>
    public const int RotSpeedFieldNumber = 3;
    private float rotSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RotSpeed {
      get { return rotSpeed_; }
      set {
        rotSpeed_ = value;
      }
    }

    /// <summary>Field number for the "max_hp" field.</summary>
    public const int MaxHpFieldNumber = 4;
    private int maxHp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxHp {
      get { return maxHp_; }
      set {
        maxHp_ = value;
      }
    }

    /// <summary>Field number for the "hp" field.</summary>
    public const int HpFieldNumber = 5;
    private int hp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 6;
    private global::CommonStruct.NetState state_ = global::CommonStruct.NetState.Living;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CommonStruct.NetState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "transform" field.</summary>
    public const int TransformFieldNumber = 7;
    private global::CommonStruct.NetTransform transform_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CommonStruct.NetTransform Transform {
      get { return transform_; }
      set {
        transform_ = value;
      }
    }

    /// <summary>Field number for the "armor_recover_delay" field.</summary>
    public const int ArmorRecoverDelayFieldNumber = 8;
    private float armorRecoverDelay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ArmorRecoverDelay {
      get { return armorRecoverDelay_; }
      set {
        armorRecoverDelay_ = value;
      }
    }

    /// <summary>Field number for the "armor_recover_speed" field.</summary>
    public const int ArmorRecoverSpeedFieldNumber = 9;
    private float armorRecoverSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ArmorRecoverSpeed {
      get { return armorRecoverSpeed_; }
      set {
        armorRecoverSpeed_ = value;
      }
    }

    /// <summary>Field number for the "free_weight" field.</summary>
    public const int FreeWeightFieldNumber = 10;
    private int freeWeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FreeWeight {
      get { return freeWeight_; }
      set {
        freeWeight_ = value;
      }
    }

    /// <summary>Field number for the "max_armor" field.</summary>
    public const int MaxArmorFieldNumber = 12;
    private int maxArmor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxArmor {
      get { return maxArmor_; }
      set {
        maxArmor_ = value;
      }
    }

    /// <summary>Field number for the "armor" field.</summary>
    public const int ArmorFieldNumber = 13;
    private int armor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Armor {
      get { return armor_; }
      set {
        armor_ = value;
      }
    }

    /// <summary>Field number for the "signal_sending" field.</summary>
    public const int SignalSendingFieldNumber = 14;
    private int signalSending_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SignalSending {
      get { return signalSending_; }
      set {
        signalSending_ = value;
      }
    }

    /// <summary>Field number for the "action_state" field.</summary>
    public const int ActionStateFieldNumber = 15;
    private global::CommonStruct.NetActionState actionState_ = global::CommonStruct.NetActionState.Attacking;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CommonStruct.NetActionState ActionState {
      get { return actionState_; }
      set {
        actionState_ = value;
      }
    }

    /// <summary>Field number for the "attacked" field.</summary>
    public const int AttackedFieldNumber = 16;
    private bool attacked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Attacked {
      get { return attacked_; }
      set {
        attacked_ = value;
      }
    }

    /// <summary>Field number for the "attack_target_eid" field.</summary>
    public const int AttackTargetEidFieldNumber = 17;
    private int attackTargetEid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackTargetEid {
      get { return attackTargetEid_; }
      set {
        attackTargetEid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetRobotData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetRobotData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Eid != other.Eid) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MoveSpeed, other.MoveSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RotSpeed, other.RotSpeed)) return false;
      if (MaxHp != other.MaxHp) return false;
      if (Hp != other.Hp) return false;
      if (State != other.State) return false;
      if (!object.Equals(Transform, other.Transform)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ArmorRecoverDelay, other.ArmorRecoverDelay)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ArmorRecoverSpeed, other.ArmorRecoverSpeed)) return false;
      if (FreeWeight != other.FreeWeight) return false;
      if (MaxArmor != other.MaxArmor) return false;
      if (Armor != other.Armor) return false;
      if (SignalSending != other.SignalSending) return false;
      if (ActionState != other.ActionState) return false;
      if (Attacked != other.Attacked) return false;
      if (AttackTargetEid != other.AttackTargetEid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Eid != 0) hash ^= Eid.GetHashCode();
      if (MoveSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MoveSpeed);
      if (RotSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RotSpeed);
      if (MaxHp != 0) hash ^= MaxHp.GetHashCode();
      if (Hp != 0) hash ^= Hp.GetHashCode();
      if (State != global::CommonStruct.NetState.Living) hash ^= State.GetHashCode();
      if (transform_ != null) hash ^= Transform.GetHashCode();
      if (ArmorRecoverDelay != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ArmorRecoverDelay);
      if (ArmorRecoverSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ArmorRecoverSpeed);
      if (FreeWeight != 0) hash ^= FreeWeight.GetHashCode();
      if (MaxArmor != 0) hash ^= MaxArmor.GetHashCode();
      if (Armor != 0) hash ^= Armor.GetHashCode();
      if (SignalSending != 0) hash ^= SignalSending.GetHashCode();
      if (ActionState != global::CommonStruct.NetActionState.Attacking) hash ^= ActionState.GetHashCode();
      if (Attacked != false) hash ^= Attacked.GetHashCode();
      if (AttackTargetEid != 0) hash ^= AttackTargetEid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Eid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Eid);
      }
      if (MoveSpeed != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(MoveSpeed);
      }
      if (RotSpeed != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(RotSpeed);
      }
      if (MaxHp != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MaxHp);
      }
      if (Hp != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Hp);
      }
      if (State != global::CommonStruct.NetState.Living) {
        output.WriteRawTag(48);
        output.WriteEnum((int) State);
      }
      if (transform_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Transform);
      }
      if (ArmorRecoverDelay != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(ArmorRecoverDelay);
      }
      if (ArmorRecoverSpeed != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(ArmorRecoverSpeed);
      }
      if (FreeWeight != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(FreeWeight);
      }
      if (MaxArmor != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(MaxArmor);
      }
      if (Armor != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(Armor);
      }
      if (SignalSending != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(SignalSending);
      }
      if (ActionState != global::CommonStruct.NetActionState.Attacking) {
        output.WriteRawTag(120);
        output.WriteEnum((int) ActionState);
      }
      if (Attacked != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(Attacked);
      }
      if (AttackTargetEid != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(AttackTargetEid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Eid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Eid);
      }
      if (MoveSpeed != 0F) {
        size += 1 + 4;
      }
      if (RotSpeed != 0F) {
        size += 1 + 4;
      }
      if (MaxHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxHp);
      }
      if (Hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
      }
      if (State != global::CommonStruct.NetState.Living) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (transform_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Transform);
      }
      if (ArmorRecoverDelay != 0F) {
        size += 1 + 4;
      }
      if (ArmorRecoverSpeed != 0F) {
        size += 1 + 4;
      }
      if (FreeWeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeWeight);
      }
      if (MaxArmor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxArmor);
      }
      if (Armor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Armor);
      }
      if (SignalSending != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SignalSending);
      }
      if (ActionState != global::CommonStruct.NetActionState.Attacking) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ActionState);
      }
      if (Attacked != false) {
        size += 2 + 1;
      }
      if (AttackTargetEid != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AttackTargetEid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetRobotData other) {
      if (other == null) {
        return;
      }
      if (other.Eid != 0) {
        Eid = other.Eid;
      }
      if (other.MoveSpeed != 0F) {
        MoveSpeed = other.MoveSpeed;
      }
      if (other.RotSpeed != 0F) {
        RotSpeed = other.RotSpeed;
      }
      if (other.MaxHp != 0) {
        MaxHp = other.MaxHp;
      }
      if (other.Hp != 0) {
        Hp = other.Hp;
      }
      if (other.State != global::CommonStruct.NetState.Living) {
        State = other.State;
      }
      if (other.transform_ != null) {
        if (transform_ == null) {
          Transform = new global::CommonStruct.NetTransform();
        }
        Transform.MergeFrom(other.Transform);
      }
      if (other.ArmorRecoverDelay != 0F) {
        ArmorRecoverDelay = other.ArmorRecoverDelay;
      }
      if (other.ArmorRecoverSpeed != 0F) {
        ArmorRecoverSpeed = other.ArmorRecoverSpeed;
      }
      if (other.FreeWeight != 0) {
        FreeWeight = other.FreeWeight;
      }
      if (other.MaxArmor != 0) {
        MaxArmor = other.MaxArmor;
      }
      if (other.Armor != 0) {
        Armor = other.Armor;
      }
      if (other.SignalSending != 0) {
        SignalSending = other.SignalSending;
      }
      if (other.ActionState != global::CommonStruct.NetActionState.Attacking) {
        ActionState = other.ActionState;
      }
      if (other.Attacked != false) {
        Attacked = other.Attacked;
      }
      if (other.AttackTargetEid != 0) {
        AttackTargetEid = other.AttackTargetEid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Eid = input.ReadInt32();
            break;
          }
          case 21: {
            MoveSpeed = input.ReadFloat();
            break;
          }
          case 29: {
            RotSpeed = input.ReadFloat();
            break;
          }
          case 32: {
            MaxHp = input.ReadInt32();
            break;
          }
          case 40: {
            Hp = input.ReadInt32();
            break;
          }
          case 48: {
            State = (global::CommonStruct.NetState) input.ReadEnum();
            break;
          }
          case 58: {
            if (transform_ == null) {
              Transform = new global::CommonStruct.NetTransform();
            }
            input.ReadMessage(Transform);
            break;
          }
          case 69: {
            ArmorRecoverDelay = input.ReadFloat();
            break;
          }
          case 77: {
            ArmorRecoverSpeed = input.ReadFloat();
            break;
          }
          case 80: {
            FreeWeight = input.ReadInt32();
            break;
          }
          case 96: {
            MaxArmor = input.ReadInt32();
            break;
          }
          case 104: {
            Armor = input.ReadInt32();
            break;
          }
          case 112: {
            SignalSending = input.ReadInt32();
            break;
          }
          case 120: {
            ActionState = (global::CommonStruct.NetActionState) input.ReadEnum();
            break;
          }
          case 128: {
            Attacked = input.ReadBool();
            break;
          }
          case 136: {
            AttackTargetEid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NetComputerData : pb::IMessage<NetComputerData> {
    private static readonly pb::MessageParser<NetComputerData> _parser = new pb::MessageParser<NetComputerData>(() => new NetComputerData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetComputerData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CommonStruct.CommonStructReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetComputerData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetComputerData(NetComputerData other) : this() {
      eid_ = other.eid_;
      needTime_ = other.needTime_;
      crackTimer_ = other.crackTimer_;
      completed_ = other.completed_;
      beingDecoded_ = other.beingDecoded_;
      transform_ = other.transform_ != null ? other.transform_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetComputerData Clone() {
      return new NetComputerData(this);
    }

    /// <summary>Field number for the "eid" field.</summary>
    public const int EidFieldNumber = 1;
    private int eid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Eid {
      get { return eid_; }
      set {
        eid_ = value;
      }
    }

    /// <summary>Field number for the "need_time" field.</summary>
    public const int NeedTimeFieldNumber = 2;
    private float needTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float NeedTime {
      get { return needTime_; }
      set {
        needTime_ = value;
      }
    }

    /// <summary>Field number for the "crack_timer" field.</summary>
    public const int CrackTimerFieldNumber = 3;
    private float crackTimer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CrackTimer {
      get { return crackTimer_; }
      set {
        crackTimer_ = value;
      }
    }

    /// <summary>Field number for the "completed" field.</summary>
    public const int CompletedFieldNumber = 4;
    private bool completed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Completed {
      get { return completed_; }
      set {
        completed_ = value;
      }
    }

    /// <summary>Field number for the "being_decoded" field.</summary>
    public const int BeingDecodedFieldNumber = 5;
    private bool beingDecoded_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BeingDecoded {
      get { return beingDecoded_; }
      set {
        beingDecoded_ = value;
      }
    }

    /// <summary>Field number for the "transform" field.</summary>
    public const int TransformFieldNumber = 6;
    private global::CommonStruct.NetTransform transform_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CommonStruct.NetTransform Transform {
      get { return transform_; }
      set {
        transform_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetComputerData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetComputerData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Eid != other.Eid) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NeedTime, other.NeedTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CrackTimer, other.CrackTimer)) return false;
      if (Completed != other.Completed) return false;
      if (BeingDecoded != other.BeingDecoded) return false;
      if (!object.Equals(Transform, other.Transform)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Eid != 0) hash ^= Eid.GetHashCode();
      if (NeedTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NeedTime);
      if (CrackTimer != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CrackTimer);
      if (Completed != false) hash ^= Completed.GetHashCode();
      if (BeingDecoded != false) hash ^= BeingDecoded.GetHashCode();
      if (transform_ != null) hash ^= Transform.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Eid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Eid);
      }
      if (NeedTime != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(NeedTime);
      }
      if (CrackTimer != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(CrackTimer);
      }
      if (Completed != false) {
        output.WriteRawTag(32);
        output.WriteBool(Completed);
      }
      if (BeingDecoded != false) {
        output.WriteRawTag(40);
        output.WriteBool(BeingDecoded);
      }
      if (transform_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Transform);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Eid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Eid);
      }
      if (NeedTime != 0F) {
        size += 1 + 4;
      }
      if (CrackTimer != 0F) {
        size += 1 + 4;
      }
      if (Completed != false) {
        size += 1 + 1;
      }
      if (BeingDecoded != false) {
        size += 1 + 1;
      }
      if (transform_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Transform);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetComputerData other) {
      if (other == null) {
        return;
      }
      if (other.Eid != 0) {
        Eid = other.Eid;
      }
      if (other.NeedTime != 0F) {
        NeedTime = other.NeedTime;
      }
      if (other.CrackTimer != 0F) {
        CrackTimer = other.CrackTimer;
      }
      if (other.Completed != false) {
        Completed = other.Completed;
      }
      if (other.BeingDecoded != false) {
        BeingDecoded = other.BeingDecoded;
      }
      if (other.transform_ != null) {
        if (transform_ == null) {
          Transform = new global::CommonStruct.NetTransform();
        }
        Transform.MergeFrom(other.Transform);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Eid = input.ReadInt32();
            break;
          }
          case 21: {
            NeedTime = input.ReadFloat();
            break;
          }
          case 29: {
            CrackTimer = input.ReadFloat();
            break;
          }
          case 32: {
            Completed = input.ReadBool();
            break;
          }
          case 40: {
            BeingDecoded = input.ReadBool();
            break;
          }
          case 50: {
            if (transform_ == null) {
              Transform = new global::CommonStruct.NetTransform();
            }
            input.ReadMessage(Transform);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NetHomeData : pb::IMessage<NetHomeData> {
    private static readonly pb::MessageParser<NetHomeData> _parser = new pb::MessageParser<NetHomeData>(() => new NetHomeData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetHomeData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CommonStruct.CommonStructReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetHomeData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetHomeData(NetHomeData other) : this() {
      eid_ = other.eid_;
      maxHp_ = other.maxHp_;
      hp_ = other.hp_;
      transform_ = other.transform_ != null ? other.transform_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetHomeData Clone() {
      return new NetHomeData(this);
    }

    /// <summary>Field number for the "eid" field.</summary>
    public const int EidFieldNumber = 1;
    private int eid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Eid {
      get { return eid_; }
      set {
        eid_ = value;
      }
    }

    /// <summary>Field number for the "max_hp" field.</summary>
    public const int MaxHpFieldNumber = 2;
    private int maxHp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxHp {
      get { return maxHp_; }
      set {
        maxHp_ = value;
      }
    }

    /// <summary>Field number for the "hp" field.</summary>
    public const int HpFieldNumber = 3;
    private int hp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    /// <summary>Field number for the "transform" field.</summary>
    public const int TransformFieldNumber = 4;
    private global::CommonStruct.NetTransform transform_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CommonStruct.NetTransform Transform {
      get { return transform_; }
      set {
        transform_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetHomeData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetHomeData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Eid != other.Eid) return false;
      if (MaxHp != other.MaxHp) return false;
      if (Hp != other.Hp) return false;
      if (!object.Equals(Transform, other.Transform)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Eid != 0) hash ^= Eid.GetHashCode();
      if (MaxHp != 0) hash ^= MaxHp.GetHashCode();
      if (Hp != 0) hash ^= Hp.GetHashCode();
      if (transform_ != null) hash ^= Transform.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Eid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Eid);
      }
      if (MaxHp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MaxHp);
      }
      if (Hp != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Hp);
      }
      if (transform_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Transform);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Eid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Eid);
      }
      if (MaxHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxHp);
      }
      if (Hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
      }
      if (transform_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Transform);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetHomeData other) {
      if (other == null) {
        return;
      }
      if (other.Eid != 0) {
        Eid = other.Eid;
      }
      if (other.MaxHp != 0) {
        MaxHp = other.MaxHp;
      }
      if (other.Hp != 0) {
        Hp = other.Hp;
      }
      if (other.transform_ != null) {
        if (transform_ == null) {
          Transform = new global::CommonStruct.NetTransform();
        }
        Transform.MergeFrom(other.Transform);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Eid = input.ReadInt32();
            break;
          }
          case 16: {
            MaxHp = input.ReadInt32();
            break;
          }
          case 24: {
            Hp = input.ReadInt32();
            break;
          }
          case 34: {
            if (transform_ == null) {
              Transform = new global::CommonStruct.NetTransform();
            }
            input.ReadMessage(Transform);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DamageInfo : pb::IMessage<DamageInfo> {
    private static readonly pb::MessageParser<DamageInfo> _parser = new pb::MessageParser<DamageInfo>(() => new DamageInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DamageInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CommonStruct.CommonStructReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DamageInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DamageInfo(DamageInfo other) : this() {
      attackId_ = other.attackId_;
      hurtId_ = other.hurtId_.Clone();
      attack_ = other.attack_;
      specialEffects_ = other.specialEffects_;
      beatBack_ = other.beatBack_;
      speedUp_ = other.speedUp_;
      slowDown_ = other.slowDown_;
      canFly_ = other.canFly_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DamageInfo Clone() {
      return new DamageInfo(this);
    }

    /// <summary>Field number for the "attack_id" field.</summary>
    public const int AttackIdFieldNumber = 1;
    private int attackId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackId {
      get { return attackId_; }
      set {
        attackId_ = value;
      }
    }

    /// <summary>Field number for the "hurt_id" field.</summary>
    public const int HurtIdFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_hurtId_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> hurtId_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> HurtId {
      get { return hurtId_; }
    }

    /// <summary>Field number for the "attack" field.</summary>
    public const int AttackFieldNumber = 3;
    private int attack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Attack {
      get { return attack_; }
      set {
        attack_ = value;
      }
    }

    /// <summary>Field number for the "special_effects" field.</summary>
    public const int SpecialEffectsFieldNumber = 4;
    private int specialEffects_;
    /// <summary>
    /// 特殊效果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpecialEffects {
      get { return specialEffects_; }
      set {
        specialEffects_ = value;
      }
    }

    /// <summary>Field number for the "beat_back" field.</summary>
    public const int BeatBackFieldNumber = 5;
    private float beatBack_;
    /// <summary>
    /// 每种特殊效果对应的数值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BeatBack {
      get { return beatBack_; }
      set {
        beatBack_ = value;
      }
    }

    /// <summary>Field number for the "speed_up" field.</summary>
    public const int SpeedUpFieldNumber = 6;
    private float speedUp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SpeedUp {
      get { return speedUp_; }
      set {
        speedUp_ = value;
      }
    }

    /// <summary>Field number for the "slow_down" field.</summary>
    public const int SlowDownFieldNumber = 7;
    private float slowDown_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SlowDown {
      get { return slowDown_; }
      set {
        slowDown_ = value;
      }
    }

    /// <summary>Field number for the "can_fly" field.</summary>
    public const int CanFlyFieldNumber = 8;
    private bool canFly_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanFly {
      get { return canFly_; }
      set {
        canFly_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DamageInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DamageInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AttackId != other.AttackId) return false;
      if(!hurtId_.Equals(other.hurtId_)) return false;
      if (Attack != other.Attack) return false;
      if (SpecialEffects != other.SpecialEffects) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BeatBack, other.BeatBack)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpeedUp, other.SpeedUp)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SlowDown, other.SlowDown)) return false;
      if (CanFly != other.CanFly) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AttackId != 0) hash ^= AttackId.GetHashCode();
      hash ^= hurtId_.GetHashCode();
      if (Attack != 0) hash ^= Attack.GetHashCode();
      if (SpecialEffects != 0) hash ^= SpecialEffects.GetHashCode();
      if (BeatBack != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BeatBack);
      if (SpeedUp != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpeedUp);
      if (SlowDown != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SlowDown);
      if (CanFly != false) hash ^= CanFly.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AttackId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AttackId);
      }
      hurtId_.WriteTo(output, _repeated_hurtId_codec);
      if (Attack != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Attack);
      }
      if (SpecialEffects != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SpecialEffects);
      }
      if (BeatBack != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(BeatBack);
      }
      if (SpeedUp != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(SpeedUp);
      }
      if (SlowDown != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(SlowDown);
      }
      if (CanFly != false) {
        output.WriteRawTag(64);
        output.WriteBool(CanFly);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AttackId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackId);
      }
      size += hurtId_.CalculateSize(_repeated_hurtId_codec);
      if (Attack != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Attack);
      }
      if (SpecialEffects != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpecialEffects);
      }
      if (BeatBack != 0F) {
        size += 1 + 4;
      }
      if (SpeedUp != 0F) {
        size += 1 + 4;
      }
      if (SlowDown != 0F) {
        size += 1 + 4;
      }
      if (CanFly != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DamageInfo other) {
      if (other == null) {
        return;
      }
      if (other.AttackId != 0) {
        AttackId = other.AttackId;
      }
      hurtId_.Add(other.hurtId_);
      if (other.Attack != 0) {
        Attack = other.Attack;
      }
      if (other.SpecialEffects != 0) {
        SpecialEffects = other.SpecialEffects;
      }
      if (other.BeatBack != 0F) {
        BeatBack = other.BeatBack;
      }
      if (other.SpeedUp != 0F) {
        SpeedUp = other.SpeedUp;
      }
      if (other.SlowDown != 0F) {
        SlowDown = other.SlowDown;
      }
      if (other.CanFly != false) {
        CanFly = other.CanFly;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AttackId = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            hurtId_.AddEntriesFrom(input, _repeated_hurtId_codec);
            break;
          }
          case 24: {
            Attack = input.ReadInt32();
            break;
          }
          case 32: {
            SpecialEffects = input.ReadInt32();
            break;
          }
          case 45: {
            BeatBack = input.ReadFloat();
            break;
          }
          case 53: {
            SpeedUp = input.ReadFloat();
            break;
          }
          case 61: {
            SlowDown = input.ReadFloat();
            break;
          }
          case 64: {
            CanFly = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
